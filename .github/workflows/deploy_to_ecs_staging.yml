# This workflow will build and push a new container image to Amazon ECR

on:
  pull_request:
  push:
    branches: ["master"]

name: Deploy to ECS - staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # uses GitHub environment
    environment:
      name: Staging
      url: "https://staging-backend.plio.in"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # sets the AWS credentials for use in next steps. This hooks comes with a post-hook as well that clears these keys once workflow ends.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # log into ECR using the AWS credentials
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # build the docker image and push to Elastic Container Registry.
      # Sets the name of the image as output to be used in further steps.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: plio-backend-staging
          IMAGE_TAG: ${{ github.sha }}nginx
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY:$ECR_REPOSITORY:$IMAGE_TAG -f nginx/Dockerfile .

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # build the docker image and push to Elastic Container Registry.
      # Sets the name of the image as output to be used in further steps.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image-web
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: plio-backend-staging
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  .

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=nginx-image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Download the task definition created at AWS ECS
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition plio-backend-staging --query taskDefinition > task-definition.json

      # Creates a new revision of the task definition with latest image id.
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-container-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: plio-backend-staging
          image: ${{ steps.build-image-web.outputs.image }}

      # Creates a new revision of the task definition with latest image id for nginx.
      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: render-container-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: plio-backend-staging-nginx
          image: ${{ steps.build-image-nginx.outputs.image }}

      # Uses the ECS service for backend to create a new task from the new task definition. The new task is created while the previous task is already running. This happens based on the minimum healthy percentage and maximum percentage configured during service creation.
      # After service completion and stability, it removes the previous task from older task definition.
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-nginx.outputs.task-definition }}
          service: plio-backend-staging
          cluster: plio-staging-cluster
          wait-for-service-stability: true
