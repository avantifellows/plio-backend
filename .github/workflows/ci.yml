name: Plio CI

on:
  pull_request:
  push:
    branches: [master]

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0

  test:
    name: Test cases
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
        # Set health checks to wait until redis has started
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

      # Creates a postgres docker where migrations will run.
      db:
        image: postgres:12.3-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions_testing
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2

      # Install Python. This matches the Python version in Dockerfile.
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Test Cases
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: github_actions_testing
          DB_USER: postgres
          DB_PASSWORD: postgres
          SECRET_KEY: wpurj&oym6m@kcp(m&z(q-g0bo-r*+!f_&j(94di8j&_j4m%2s # random secret key
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          ANALYTICS_IDP_TYPE: ${{ secrets.ANALYTICS_IDP_TYPE }}
          ANALYTICS_IDP_TOKEN_URL: ${{ secrets.ANALYTICS_IDP_TOKEN_URL }}
          ANALYTICS_IDP_CLIENT_ID: ${{ secrets.ANALYTICS_IDP_CLIENT_ID }}
          ANALYTICS_IDP_CLIENT_SECRET: ${{ secrets.ANALYTICS_IDP_CLIENT_SECRET }}
          REDIS_HOSTNAME: 127.0.0.1
          REDIS_PORT: 6379
        # command to run tests and generate coverage metrics
        run: coverage run manage.py test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Plio Frontend
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-frontend/
          cd plio-frontend/

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'VUE_APP_GOOGLE_CLIENT_ID=${{ secrets.VUE_APP_GOOGLE_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_ID=${{ secrets.VUE_APP_BACKEND_API_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_SECRET=${{ secrets.VUE_APP_BACKEND_API_CLIENT_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Set up Plio Backend
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-backend
          cd plio-backend/

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_SETUP=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SETUP }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_ID=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_SECRET=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}' >> .env
          echo 'GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.DJANGO_GOOGLE_OAUTH2_CLIENT_ID }}' >> .env
          echo 'GOOGLE_OAUTH2_CLIENT_SECRET=${{ secrets.DJANGO_GOOGLE_OAUTH2_CLIENT_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Set up Plio Analytics
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-analytics
          cd plio-analytics/

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'CUBEJS_API_SECRET=${{ secrets.ANALYTICS_CUBEJS_API_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Run cypress
        run: |
          cd projects/plio-frontend/

          # setup env secrets
          export cypress_backend_convert_social_auth_token_url=${{ secrets.CYPRESS_PLIO_BACKEND_CONVERT_SOCIAL_AUTH_TOKEN_URL }}
          export cypress_backend_client_id=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}
          export cypress_backend_client_secret=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}
          export cypress_auth_google_refresh_token=${{ secrets.CYPRESS_AUTH_GOOGLE_REFRESH_TOKEN }}
          export cypress_auth_google_client_id=${{ secrets.CYPRESS_AUTH_GOOGLE_CLIENT_ID }}
          export cypress_auth_google_client_secret=${{ secrets.CYPRESS_AUTH_GOOGLE_CLIENT_SECRET }}

          # run cypress test cases
          npx cypress run --record --key ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Stop the containers
        if: always()
        run: |
          cd projects/
          cd plio-frontend/ && docker-compose down
          cd ../plio-backend/ && docker-compose down
          cd ../plio-analytics/ && docker-compose down
