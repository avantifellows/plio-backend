# django
APP_ENV='local' # local, staging, production
SECRET_KEY='i%&w001-tkaz_f&r#=1%9^90eaqdhu1byjjx#11n*zf&ua@s9@' # generate from https://djecrety.ir/
DEBUG=False
# [::1] is all IPv6
# * is all IPv4
ALLOWED_HOSTS='[::1] *'

# database access credentials
DB_ENGINE=django_tenants.postgresql_backend
DB_HOST=db
DB_NAME=plio
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=''

# web server
APP_PORT=8001

# google oauth credentials
GOOGLE_OAUTH2_CLIENT_ID=''
GOOGLE_OAUTH2_CLIENT_SECRET=''

# aws credentials
AWS_ACCESS_KEY_ID=''
AWS_SECRET_ACCESS_KEY=''
AWS_REGION=''
AWS_STORAGE_BUCKET_NAME=''

# bigquery credentials
BIGQUERY_ENABLED=False
BIGQUERY_PROJECT_ID=''
BIGQUERY_LOCATION=''
BIGQUERY_CREDENTIALS=''

# redis details
REDIS_HOSTNAME='redis'
REDIS_PORT=6379



SUPERUSER_EMAIL=''
SUPERUSER_PASSWORD=''

DEFAULT_TENANT_NAME=Plio
DEFAULT_TENANT_SHORTCODE=plio
DEFAULT_TENANT_DOMAIN=0.0.0.0

# Analytics Identity Provider (IDP) configurations
ANALYTICS_IDP_TYPE='' # possible values are `cognito` or `auth0`
ANALYTICS_IDP_TOKEN_URL=''
ANALYTICS_IDP_CLIENT_ID=''
ANALYTICS_IDP_CLIENT_SECRET=''
ANALYTICS_IDP_AUDIENCE='' # not needed when IDP is `cognito`

# The driver for sending SMSs. Possible values are `sns` or `log`.
# Use `sns` to have AWS SNS support. The AWS credentials must be present for this.
# Use an empty string to log SMSs into a file instead. Recommended for development mode.
SMS_DRIVER='sns'

# Sentry Data Source Name
SENTRY_DSN=''

# Default OAuth2 API Client
DEFAULT_OAUTH2_CLIENT_SETUP=True
DEFAULT_OAUTH2_CLIENT_ID=''
DEFAULT_OAUTH2_CLIENT_SECRET=''
